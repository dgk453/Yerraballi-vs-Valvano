


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these wri
                       tecommand and writedata
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000         
   22 00000000 400043FC 
                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   23 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   24 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   25 00000000         
   26 00000000                 EXPORT           writecommand
   27 00000000                 EXPORT           writedata
   28 00000000         
   29 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   30 00000000                 THUMB
   31 00000000                 ALIGN
   32 00000000         
   33 00000000         ; The Data/Command pin must be valid when the eighth bit
                        is
   34 00000000         ; sent.  The SSI module has hardware input and output FI
                       FOs
   35 00000000         ; that are 8 locations deep.  Based on the observation t
                       hat
   36 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   37 00000000         ; lot of data, the FIFOs are not used when writing
   38 00000000         ; commands, and they are used when writing data.  This
   39 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   40 00000000         ; that is actually being transmitted.
   41 00000000         ; The write command operation waits until all data has b
                       een
   42 00000000         ; sent, configures the Data/Command pin for commands, se



ARM Macro Assembler    Page 2 


                       nds
   43 00000000         ; the command, and then waits for the transmission to
   44 00000000         ; finish.
   45 00000000         ; The write data operation waits until there is room in 
                       the
   46 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   47 00000000         ; and then adds the data to the transmit FIFO.
   48 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   49 00000000         ; the SSI0 module is not initialized and enabled.
   50 00000000         
   51 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   52 00000000         ; Input: R0  8-bit command to transmit
   53 00000000         ; Output: none
   54 00000000         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   55 00000000         writecommand
   56 00000000         ;; --UUU-- Code to write a command to the LCD
   57 00000000         ;1) Read SSI0_SR_R and check bit 4, 
   58 00000000         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   59 00000000         ;3) Clear D/C=PA6 to zero
   60 00000000         ;4) Write the command to SSI0_DR_R
   61 00000000         ;5) Read SSI0_SR_R and check bit 4, 
   62 00000000         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   63 00000000 B406            PUSH{R1-R2}
   64 00000002 4914            LDR              R1, =SSI0_SR_R
   65 00000004         wloop
   66 00000004 680A            LDR              R2, [R1]
   67 00000006 F002 0210       AND              R2, #0x10
   68 0000000A 0912            LSRS             R2, #4
   69 0000000C D1FA            BNE              wloop
   70 0000000E         
   71 0000000E 4912            LDR              R1, =GPIO_PORTA_DATA_R
   72 00000010 680A            LDR              R2,[R1]
   73 00000012 F022 0240       BIC              R2, #0x40
   74 00000016 600A            STR              R2, [R1]
   75 00000018         
   76 00000018 4910            LDR              R1, =SSI0_DR_R
   77 0000001A 780A            LDRB             R2, [R1]
   78 0000001C 4602            MOV              R2, R0
   79 0000001E 700A            STRB             R2,[R1]
   80 00000020         
   81 00000020 490C            LDR              R1, =SSI0_SR_R
   82 00000022         sloop
   83 00000022 680A            LDR              R2, [R1]
   84 00000024 F002 0210       AND              R2, #0x10
   85 00000028 2A00            CMP              R2, #0
   86 0000002A D1FA            BNE              sloop
   87 0000002C         
   88 0000002C BC06            POP              {R1-R2}
   89 0000002E         
   90 0000002E 4770            BX               LR          ;   return
   91 00000030         
   92 00000030         ; This is a helper function that sends an 8-bit data to 
                       the LCD.



ARM Macro Assembler    Page 3 


   93 00000030         ; Input: R0  8-bit data to transmit
   94 00000030         ; Output: none
   95 00000030         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   96 00000030         writedata
   97 00000030         ;; --UUU-- Code to write data to the LCD
   98 00000030         ;1) Read SSI0_SR_R and check bit 1, 
   99 00000030         ;2) If bit 1 is low loop back to step 1 (wait for TNF bi
                       t to be high)
  100 00000030         ;3) Set D/C=PA6 to one
  101 00000030         ;4) Write the 8-bit data to SSI0_DR_R
  102 00000030 B406            PUSH{R1-R2}
  103 00000032 4908            LDR              R1, =SSI0_SR_R
  104 00000034         dloop
  105 00000034 680A            LDR              R2, [R1]
  106 00000036 F002 0202       AND              R2, #0x02
  107 0000003A 0852            LSRS             R2, #1
  108 0000003C D0FA            BEQ              dloop
  109 0000003E         
  110 0000003E 4906            LDR              R1, =GPIO_PORTA_DATA_R
  111 00000040 680A            LDR              R2,[R1]
  112 00000042 F042 0240       ORR              R2, #0x40
  113 00000046 600A            STR              R2, [R1]
  114 00000048         
  115 00000048 4904            LDR              R1, =SSI0_DR_R
  116 0000004A 780A            LDRB             R2, [R1]
  117 0000004C 4602            MOV              R2, R0
  118 0000004E 700A            STRB             R2,[R1]
  119 00000050         
  120 00000050 BC06            POP{R1-R2}
  121 00000052 4770            BX               LR          ;   return
  122 00000054         
  123 00000054         
  124 00000054         ;***************************************************
  125 00000054         ; This is a library for the Adafruit 1.8" SPI display.
  126 00000054         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
  127 00000054         ; ----> http://www.adafruit.com/products/358
  128 00000054         ; as well as Adafruit raw 1.8" TFT display
  129 00000054         ; ----> http://www.adafruit.com/products/618
  130 00000054         ;
  131 00000054         ; Check out the links above for our tutorials and wiring
                        diagrams
  132 00000054         ; These displays use SPI to communicate, 4 or 5 pins are
                        required to
  133 00000054         ; interface (RST is optional)
  134 00000054         ; Adafruit invests time and resources providing this ope
                       n source code,
  135 00000054         ; please support Adafruit and open-source hardware by pu
                       rchasing
  136 00000054         ; products from Adafruit!
  137 00000054         ;
  138 00000054         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
  139 00000054         ; MIT license, all text above must be included in any re
                       distribution
  140 00000054         ;****************************************************
  141 00000054         
  142 00000054                 ALIGN                        ; make sure the end



ARM Macro Assembler    Page 4 


                                                             of this section is
                                                             aligned
  143 00000054                 END                          ; end of file
              4000800C 
              400043FC 
              40008008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\lcd.d -o.\lcd.o -I.\RTE\_SpaceInvaders -IC:\Users\danie\AppData\
Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\danie\AppData\Loc
al\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SET
A 1" --predefine="__UVISION_VERSION SETA 536" --predefine="_RTE_ SETA 1" --pred
efine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 29 in file LCD.s
   Uses
      None
Comment: .text unused
dloop 00000034

Symbol: dloop
   Definitions
      At line 104 in file LCD.s
   Uses
      At line 108 in file LCD.s
Comment: dloop used once
sloop 00000022

Symbol: sloop
   Definitions
      At line 82 in file LCD.s
   Uses
      At line 86 in file LCD.s
Comment: sloop used once
wloop 00000004

Symbol: wloop
   Definitions
      At line 65 in file LCD.s
   Uses
      At line 69 in file LCD.s
Comment: wloop used once
writecommand 00000000

Symbol: writecommand
   Definitions
      At line 55 in file LCD.s
   Uses
      At line 26 in file LCD.s
Comment: writecommand used once
writedata 00000030

Symbol: writedata
   Definitions
      At line 96 in file LCD.s
   Uses
      At line 27 in file LCD.s
Comment: writedata used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 22 in file LCD.s
   Uses
      At line 71 in file LCD.s
      At line 110 in file LCD.s

SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 23 in file LCD.s
   Uses
      At line 76 in file LCD.s
      At line 115 in file LCD.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 24 in file LCD.s
   Uses
      At line 64 in file LCD.s
      At line 81 in file LCD.s
      At line 103 in file LCD.s

3 symbols
345 symbols in table
